#autoload
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# Copyright (c) 2021 Z-Shell Community

  builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
  builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

  if [[ "$1" = plugin ]] {
    local type="$1" user="$2" plugin="$3" id_as="$4" dir="${5#%}" hook="$6"
  } else {
    local type="$1" url="$2" id_as="$3" dir="${4#%}" hook="$5"
  }

  local nl=$'\n'

  if [[ -n "${ICE[gem]}" ]] {
    local -a gem_defs srcdst tmpsdst gems
    gem_defs=( "${(s.;.)ICE[gem]}" )

    local gem

    for gem ( $gem_defs ) {
      srcdst=( ${(@s.->.)gem} )
      tmpsdst=( ${(@s.<-.)srcdst[1]} )
      if (( ${#tmpsdst} > 1 )); then
        srcdst=( "${tmpsdst[1]}" "${tmpsdst[2]}" "${srcdst[2]:-${tmpdist[2]#\!}}" )
      else
        srcdst=( "${tmpsdst[1]#\!}" "${tmpsdst[1]}" "${srcdst[2]:-${srcdst[1]#\!}}" )
      fi
      srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      srcdst[2]=${srcdst[2]#\!}

      # Substitute the standard keywords and param''-s
      @zi-substitute 'srcdst[1]' 'srcdst[2]' 'srcdst[3]'

      gems+=( ${srcdst[2]} )
    }

    (( ${#gems} )) && {
      if [[ $hook = *atclone-<-> ]]; then
        command gem install -q --no-user-install -i "$dir" "${gems[@]}"
      elif [[ $hook = *atpull-<-> ]]; then
        if (( !OPTS[opt_-q,--quiet] )) {
          +zi-message "{annex}bin-gem-node annex{ehi}:{rst} Updating the gems…{rst}"
          command gem update -q --no-user-install -i "$dir" "${gems[@]}"
        } else {
          command gem update -q --no-user-install -i "$dir" "${gems[@]}" &> /dev/null
        }
      fi
    }
  }

  if [[ -n "${ICE[pip]}" ]] {
    local -a pip_defs srcdst tmpsdst imods umods
    pip_defs=( "${(s.;.)ICE[pip]}" )

    local pip
    integer perform_update=0

    for pip ( $pip_defs ) {
      srcdst=( ${(@s.->.)pip} )
      tmpsdst=( ${(@s.<-.)srcdst[1]} )
      if (( ${#tmpsdst} > 1 )); then
        srcdst=( "${tmpsdst[1]}" "${tmpsdst[2]}" "${srcdst[2]:-${tmpdist[2]#\!}}" )
      else
        srcdst=( "${tmpsdst[1]#\!}" "${tmpsdst[1]}" "${srcdst[2]:-${srcdst[1]#\!}}" )
      fi
      srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      srcdst[2]=${srcdst[2]#\!}

      # Substitute the standard keywords and param''-s
      @zi-substitute 'srcdst[1]' 'srcdst[2]' 'srcdst[3]'

      if [[ "$hook" = *atclone-<-> ]]; then
        imods+=( ${srcdst[2]} )
      elif [[ "$hook" = *atpull-<-> && -n ${srcdst[2]} ]]; then
        umods+=( ${srcdst[2]} )
        perform_update=1
        break
      fi
    }

    (( ${#imods} )) && \
    ( builtin cd -q "$dir" && command python3 -m venv venv && VIRTUALENV=venv(:A) command venv/bin/pip install "${imods[@]}" )

    (( perform_update )) && (( ${#umods} )) && \
    (
      builtin cd -q "$dir" && {
        if (( !OPTS[opt_-q,--quiet] )) {
          +zi-message "{annex}bin-gem-node-annex{ehi}: {auto}Updating the pip packages …"
          VIRTUALENV=venv(:A) command venv/bin/pip install --upgrade "${umods[@]}"
        } else {
          VIRTUALENV=venv(:A) command venv/bin/pip install -q --upgrade "${umods[@]}"
        }
      }
    )
  }

  if [[ -n "${ICE[node]}" ]] {
    local -a node_defs srcdst tmpsdst mods
    node_defs=( "${(s.;.)ICE[node]}" )

    local node
    integer perform_update=0

    for node ( $node_defs ) {
      srcdst=( ${(@s.->.)node} )
      tmpsdst=( ${(@s.<-.)srcdst[1]} )
      if (( ${#tmpsdst} > 1 )); then
        srcdst=( "${tmpsdst[1]}" "${tmpsdst[2]}" "${srcdst[2]:-${tmpdist[2]#\!}}" )
      else
        srcdst=( "${tmpsdst[1]#\!}" "${tmpsdst[1]}" "${srcdst[2]:-${srcdst[1]#\!}}" )
      fi
      srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      srcdst[2]=${srcdst[2]#\!}

      # Substitute the standard keywords and param''-s
      @zi-substitute 'srcdst[1]' 'srcdst[2]' 'srcdst[3]'

      if [[ "$hook" = *atclone-<-> ]]; then
        mods+=( ${srcdst[2]} )
      elif [[ "$hook" = *atpull-<-> && -n ${srcdst[2]} ]]; then
        perform_update=1
        break
      fi
    }

    (( ${#mods} )) && \
    ( builtin cd -q "$dir" && command npm --silent install "${mods[@]}" )

    (( perform_update )) && \
    (
      builtin cd -q "$dir" && {
        if (( ! OPTS[opt_-q,--quiet] )) {
          +zi-message "{annex}bin-gem-node-annex{ehi}: {auto}Updating the node modules …"
          command npm --silent update
        } else {
          command npm --silent update &> /dev/null
        }
      }
    )
  }

  #
  # sbin'' ice – creation of shims (the name borrowed from rbenv)
  #

  if (( ${+ICE[sbin]} )) {
    local -a sbins srcdst
    sbins=( ${(s.;.)ICE[sbin]} )

    local sbin

    (
      # CD for the globbing through eval
      builtin cd -q "$dir" || return

      for sbin ( $sbins "" ) {
        integer set_gem_home=0 set_node_path=0 set_virtualenv=0 set_cwd=0 \
        use_all_null=0 use_err_null=0 use_out_null=0

        if [[ -z $sbin && ${#sbins} -eq 0 ]] {
          if [[ -f $dir/${id_as:t} ]]; then
            sbin="$dir/${id_as:t}"
          elif [[ -n $plugin && -f $dir/$plugin ]]; then
            sbin="$dir/$plugin"
          elif [[ -n $url && -f $dir/${url:t} ]]; then
            sbin="$dir/${url:t}"
          else
            local -a files
            files=( $dir/*(*Nnon:t) )
            if (( ${#files} )); then
              sbin="${files[1]}"
            else
              +zi-message "{annex}bin-gem-node-annex{ehi}: {error}The automatic-empty {ice}sbin {cmd}ice{error} didn't find any executable files {…}{rst}"
              break
            fi
          fi
        } elif [[ -z $sbin ]] {
          continue
        }

        srcdst=( ${(@s.->.)sbin} )
        srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
        [[ ${srcdst[1]} = [gnpcNEO]#g[gnpcNEO]#:* ]] && set_gem_home=1
        [[ ${srcdst[1]} = [gnpcNEO]#n[gnpcNEO]#:* ]] && set_node_path=1
        [[ ${srcdst[1]} = [gnpcNEO]#p[gnpcNEO]#:* ]] && set_virtualenv=1
        [[ ${srcdst[1]} = [gnpcNEO]#c[gnpcNEO]#:* ]] && set_cwd=1
        [[ ${srcdst[1]} = [gnpcNEO]#N[gnpcNEO]#:* ]] && use_all_null=1
        [[ ${srcdst[1]} = [gnpcNEO]#E[gnpcNEO]#:* ]] && use_err_null=1
        [[ ${srcdst[1]} = [gnpcNEO]#O[gnpcNEO]#:* ]] && use_out_null=1
        srcdst[1]=${srcdst[1]#[a-zA-Z]#:}

        # Substitute the standard keywords and param''-s
        @zi-substitute 'srcdst[1]' 'srcdst[2]'

        local -a fnames
        local fname
        eval "fnames=( ${srcdst[1]}(Nnon-.) )"

        if (( !${#fnames} )) {
          +zi-message "{annex}bin-gem-node-annex{ehi}: {error}Warning{ehi}:{rst} The {ice}sbin''{rst} {cmd}ice{rst} \`{pname}${sbin}{rst}' didn't match any files {…}{rst}"          continue
        }

        for fname ( $fnames ) {
            srcdst[1]="$fname"

          local target_binary="${${(M)srcdst[1]:#/*}:-$dir/${srcdst[1]}}" fnam="${srcdst[2]:-${srcdst[1]:t}}"
          local file="${ZPFX}/bin/${fnam}"

          if [[ $OSTYPE == cygwin ]]; then
            .za-bgn-bin-or-src-function-body-cygwin 0 "$fnam" \
            "$target_binary" "$dir" "$set_gem_home" \
            "$set_node_path" "$set_virtualenv" "$set_cwd" "$use_all_null" \
            "$use_err_null" "$use_out_null"
            builtin print -r -- "$REPLY" >! "$file.cmd"
            command chmod +x "$file.cmd"
          fi

          .za-bgn-bin-or-src-function-body 0 "$fnam" \
          "$target_binary" "$dir" "$set_gem_home" \
          "$set_node_path" "$set_virtualenv" "$set_cwd" "$use_all_null" \
          "$use_err_null" "$use_out_null"

          builtin print -r -- "#!/usr/bin/env zsh$nl$nl$REPLY$nl$nl$fnam \"\$@\"" >! "$file"
          command chmod +x "$file" "$target_binary"

          if [[ -x $file ]]; then
            (( !OPTS[opt_-q,--quiet] )) && \
              if [[ -x $target_binary ]]; then
                if [[ $hook == atclone-<-> || $ZI[annex-multi-flag:pull-active] -ge  2 ]] {
                  +zi-message "{annex}bin-gem-node-annex{ehi}:{rst} ${${${hook:#*atclone-<->}:+Re-c}:-C}reated the {pname}$fnam{rst} shim and set {auto}\`+x\`{rst} on the {pname}${target_binary:t}{rst} binary"
                }
              else
                +zi-message "{annex}bin-gem-node-annex{ehi}:{rst} ${${${hook:#*atclone-<->}:+Re-c}:-C}reated the {pname}$fnam{rst} shim{nl}{mmdsh}{rst} The {pname}${target_binary:t}{rst} binary does not exist or failed to set {auto}\`+x\` on it"
              fi
          else
            +zi-message "{annex}bin-gem-node-annex{ehi}:{rst} {error}Something went wrong creating the {pname}$fnam{error} shim {…}{rst}"
          fi
          }
        }
      )
  }

  if [[ -n "${ICE[fbin]}" ]] {
    local -a fbins srcdst
    fbins=( "${(s.;.)ICE[fbin]}" )

    local fbin

    for fbin ( $fbins ) {
      srcdst=( ${(@s.->.)fbin} )
      srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
      srcdst[1]=${srcdst[1]#[a-zA-Z]##:}

      # Substitute the standard keywords and param''-s
      @zi-substitute 'srcdst[1]'

      local target_binary="${${(M)srcdst[1]:#/*}:-$dir/${srcdst[1]}}" \

      command chmod +x "$target_binary"

      if [[ -x $target_binary ]]; then
        (( !OPTS[opt_-q,--quiet] )) && \
        +zi-message "{annex}bin-gem-node-annex{ehi}:{rst} {auto}Set \`+x\`{rst} on the {pname}${target_binary:t}{rst} binary"
      else
        +zi-message "{annex}bin-gem-node-annex{ehi}:{rst} {error}Something went wrong while setting {auto}\`+x\`{error} on the {pname}${target_binary:t}{error} binary"
      fi
    }
  }
